builds:
  - main: .
    id: "retry"
    binary: retry
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64

nfpms:
  - id: retry
    package_name: retry
    vendor: glynternet
    homepage: https://github.com/glynternet/retry
    maintainer: glynternet <1295698+glynternet@users.noreply.github.com>
    description: &short_description |-
      The command for retrying commands
    license: MIT
    formats:
#      - apk
      - deb
#      - rpm
#      - archlinux

    # Packages it provides. (overridable)
    #
    # Since: v1.11
#    provides:
#      - bar

    # Section.
#    section: default

    # Priority.
#    priority: extra

    # Makes a meta package - an empty package that contains only supporting
    # files and dependencies.
    # When set to `true`, the `builds` option is ignored.
#    meta: true

    # Changelog YAML file, see: https://github.com/goreleaser/chglog
    #
    # You can use goreleaser/chglog to create the changelog for your project,
    # pass that changelog yaml file to GoReleaser,
    # and it should in turn setup it accordingly for the given available
    # formats (deb and rpm at the moment).
    #
    # Experimental.
    # Since: v1.11
#    changelog: ./foo.yml


# HOMEBREW
# follow instructions in:
#  - https://askcloudarchitech.com/posts/tutorials/create-homebrew-tap-golang-goreleaser-cobra-cli/
#  - https://observiq.com/blog/creating-homebrew-formulas-with-goreleaser
brews:
  - name: retry
    description: *short_description
    repository:
      owner: glynternet
      name: homebrew-glynternet
      branch: main
    folder: Formula
    commit_author:
      name: glynternet
      email: 1295698+glynternet@users.noreply.github.com
    caveats: "Run 'retry --help' for usage instructions"
    homepage: "https://github.com/glynternet/retry"
    license: "MIT"

# SNAPS
snapcrafts:
  - id: retry
    name: retry
    title: retry
    # TODO: icon
    # icon: ./icon.png

    # Requires snapcraft login
    publish: true

    # 79 char long at most.
    summary: *short_description
    description: *short_description

    # Channels in store where snap will be pushed.
    #
    # More info about channels here:
    # https://snapcraft.io/docs/reference/channels
    #
    # Default:
    #   grade is 'stable': ["edge", "beta", "candidate", "stable"]
    #   grade is 'devel': ["edge", "beta"]
    # Templates: allowed (since v1.15)
#    channel_templates:
#      - edge
#      - beta
#      - candidate
#      - stable
#      - "{{ .Major }}.{{ .Minor }}/edge"
#      - "{{ .Major }}.{{ .Minor }}/beta"
#      - "{{ .Major }}.{{ .Minor }}/candidate"
#      - "{{ .Major }}.{{ .Minor }}/stable"

    # A guardrail to prevent you from releasing a snap to all your users before
    # it is ready.
    # `devel` will let you release only to the `edge` and `beta` channels in the
    # store. `stable` will let you release also to the `candidate` and `stable`
    # channels.
    grade: devel

    # https://snapcraft.io/docs/reference/confinement
    confinement: strict
    license: MIT

    # A snap of type base to be used as the execution environment for this snap.
    # Valid values are:
    # * bare - Empty base snap;
    # * core - Ubuntu Core 16;
    # * core18 - Ubuntu Core 18.
    base: base
